@inject IUserData userData
@inject IRequestsData requestsData
@inject IEvaluationsData evaluationsData
@inject ISnackbar Snackbar


<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="6">
                <div style="border-right: solid 1px; padding-right:5px; height:100%;">
                    <h6 style="font-weight: bold">User Being Evaluated</h6>

                    <p class="adcon-dialogue"><b>User</b>: @user.firstName @user.lastName</p>
                    <p><b>Rank:</b> @user.rank</p>
                    <p><b>Job:</b> @user.job</p>
                    <p><b>Role:</b> @user.role</p>
                </div>
            </MudItem>
            <MudItem xs="6">
                <div style="height:100%;">
                    <h6 style="font-weight: bold">New Evaluator</h6>
                    <p class="mb-4"><b>User</b>: @newEvaluator.firstName @newEvaluator.lastName</p>
                    <p><b>Rank:</b> @newEvaluator.rank</p>
                    <p><b>Job:</b> @newEvaluator.job</p>
                    <p><b>Role:</b> @newEvaluator.role</p>
                </div>
            </MudItem>
        </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>

        @if (canApproveOrDeny)
        {
            <MudButton Disabled="@(processingEvaluationRequest || (currentStatus != "Pending" && currentStatus != "Awaiting second response"))"
                OnClick="() => onApproval()">Approve</MudButton>

            <MudButton Disabled="@(processingEvaluationRequest || (currentStatus != "Pending" && currentStatus != "Awaiting second response"))"
                OnClick="() => denyEvaluationRequests()"
            >Deny</MudButton>
        }
    </DialogActions>
    

</MudDialog>



@code {
    public class EvaluationAssignmentRequests
    {
        public UserModel user;
        public UserModel superiorOfUser;
        public UserModel newEvaluator;
        public RequestsModel request;
        public String status;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel newEvaluator { get; set; }
    [Parameter] public UserModel user { get; set; }
    [Parameter] public String currentStatus { get; set; }
    [Parameter] public Action<string> UpdateStatus { get; set; }
    [Parameter] public bool canApproveOrDeny { get; set; }
    [Parameter] public bool requiresMultipleApprovals { get; set; }


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    bool processingEvaluationRequest = false;

    async Task onApproval()
    {
        processingEvaluationRequest = true;

        if (requiresMultipleApprovals)
        {
            UpdateStatus("Awaiting second response");
            currentStatus = "Awaiting second response";
            Snackbar.Add("Successfully approved evaluation requests. Wait for other approvals", Severity.Success);
        }
        else
        {

            var selfAssignedEvaluators = await evaluationsData.GetAllSelfAssignedEvaluatorsIDs(user.userID);

            if(selfAssignedEvaluators.Count < 3)
            {
                EvaluationsModel newEvaluation = new EvaluationsModel();
                newEvaluation.superiorAssigned = false;
                newEvaluation.evaluatorId = newEvaluator.userID;
                newEvaluation.userBeingEvaluatedId = user.userID;

                await evaluationsData.CreateEvaluation(newEvaluation);

                UpdateStatus("Approved");
                currentStatus = "Approved";
                Snackbar.Add("Successfully approved evaluation requests.", Severity.Success);
            }
            else
            {
                UpdateStatus("Error");
                currentStatus = "Error";
                Snackbar.Add("Error: exceeded limit of evaluators or error assigning user to evaluators", Severity.Error);
            }
        }

        processingEvaluationRequest = false;
    }


    async Task denyEvaluationRequests()
    {
        UpdateStatus("Denied");
        currentStatus = "Denied";
        Snackbar.Add("Successfully denied evaluation requests.", Severity.Success);
        StateHasChanged();
    }


    protected async override Task OnInitializedAsync()
    {
    }
}
