@inject IUserData userData
@inject INewSurveyData newSurveyData

<MudDialog Style="font-family:HelveticaNeueMedium; font-style: normal; font-weight: 900; font-size:100%; border-radius: 15px; background: #E7F1FF; box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25);">
    <DialogContent>
        @foreach(var question in questions)
        {
            <div>
                <h5 style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:150%;">Question @question.questionNumber</h5>
                <div style="padding-left: 5%; padding-bottom: 2%">
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Question: </b> @question.question</p>
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Subject: </b> @question.subject</p>
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Category: </b>@question.category</p>
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Response: </b>@question.response</p>
                </div>
             </div>
            <MudDivider />
        }
        @foreach(var question in injectedQuestionsHistory)
        {
            <div>
                <h5 style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:150%;">Question @question.questionNumber</h5>
                <div style="padding-left: 5%; padding-bottom: 2%">
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Injected Question: </b> @question.question</p>
                    <p><b style="font-family:HelveticaNeueBold; font-style: normal; font-weight: 900; font-size:130%;">Response: </b>@question.response</p>
                </div>
             </div>
            <MudDivider />
        }


    </DialogContent>
    <!--
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
    -->
</MudDialog>


@code {

    public class QuestionView
    {
        public string question = "";
        public string subject = "";
        public string category = "";
        public string response = "";
        public int questionNumber;
    }

    List<QuestionView> questions = new List<QuestionView>();
    List<QuestionView> injectedQuestionsHistory = new List<QuestionView>();

    string GetCategory(int categoryNumber)
    {
        switch (categoryNumber)
        {
            case 1:
                return "Job Dedication";
            case 2:
                return "Interpersonal Justice";
            case 3:
                return "Informational Justice";
            case 4:
                return "Innovator";
            case 5:
                return "Risk Attitude ";
            case 6:
                return "Integrity";
            case 7:
                return "TP";
            case 8:
                return "Trust";
            case 9:
                return "Innovation Climate";
            case 10:
                return "Authenticity - Authentic Living ";
            case 11:
                return "Supporting";
            case 12:
                return "OCB-I";
            case 13:
                return "Help-Seeking";
            case 14:
                return "Problem-solving assistance";
            case 15:
                return "Supervisor Task Support";
            case 16:
                return "Honesty/Candor";
            case 17:
                return "Inclusion";
            case 18:
                return "Moral strivings";
            case 19:
                return "Fairness";
            case 20:
                return "Managerial Behavior: Broker";
            case 21:
                return "Psychological Saftey";
            case 22:
                return "Communication/Cooperation";
            case 23:
                return "Information Sharing";
            case 24:
                return "Servant Leadership";
            case 25:
                return "Resource Availability";
            case 26:
                return "Learning goal orientation";
            case 27:
                return "Intellectual Stimulation";
            case 28:
                return "Feedback from Agents";
            case 29:
                return "General Risk Propensity";
            case 30:
                return "Feedback Seeking";
            case 31:
                return "Accountability";
            case 32:
                return "DEI";
            case 33:
                return "Moral Courage";
            case 34:
                return "OCB-O";
            default:
                return "General Risk Propensity";
        }
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel currentUser { get; set; }
    [Parameter] public NewSurveyModel survey{ get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    protected async override Task OnInitializedAsync()
    {
        @for (int i = 0; i < survey.question.Count; i++)
        {
            QuestionView newQuestion = new QuestionView();
            
            if (survey.category[i] != "Injected")
            {
                UserModel subjectUser = await userData.GetUser(survey.subjectID);
                newQuestion.question = survey.question[i];
                newQuestion.subject = subjectUser.firstName + " " + subjectUser.lastName; // TODO: check for null??? (running into issue because old survey capture)
                newQuestion.category = GetCategory(int.Parse(survey.category[i]));
                newQuestion.response = survey.freeResponseText[i].ToString();
                newQuestion.questionNumber = i + 1;
                questions.Add(newQuestion);
            }
            else
            {
                newQuestion.question = survey.question[i];
                newQuestion.response = survey.freeResponseText[i];
                newQuestion.questionNumber = i + 1;
                injectedQuestionsHistory.Add(newQuestion);
            }
            
        }
    }
}
