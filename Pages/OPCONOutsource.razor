@page "/Requests/OPCON-outsource"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ITeamsData teamsData
@inject IRequestsData requestsData
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<PageTitle>OPCON Outsource</PageTitle>

<div>

    <MudPaper Width="100%" Class="mt-15 mb-3 pa-2" Elevation="1">

        <MudNavGroup Title="Recieved OPCON Outsource Requests" @bind-Expanded=_recievedOutsourceIsExpanded>
            <MudTable Items="@recievedOutsourceRequests" Hover="true" Loading="@_loadingRecievedRequests">
                <HeaderContent>
                    <MudTh>User</MudTh>
                    <MudTh>New team</MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<OPCONOutsourceRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.user.firstName</MudTd>
                    <MudTd>@context.newTeam.name</MudTd>
                    <MudTd>@context.status</MudTd>
                    <MudTd>
                        <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                            View More
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudNavGroup>

            
        <MudNavGroup Title="Sent OPCON Outsource Requests" @bind-Expanded=_sentOutsourceIsExpanded>
            <MudTable Items="@sentOutsourceRequests" Hover="true" Loading="@_loadingRecievedRequests">
                <HeaderContent>
                    <MudTh>User</MudTh>
                    <MudTh>New team</MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<OPCONOutsourceRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.user.firstName</MudTd>
                    <MudTd>@context.newTeam.name</MudTd>
                    <MudTd>@context.status</MudTd>
                    <MudTd>
                        <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                            View More
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudNavGroup>
        

    </MudPaper>
</div>



@code {

    public class OPCONOutsourceRequests
    {
        public UserModel user;
        public TeamsModel newTeam;
        public RequestsModel request;
        public String status;
    }

    List<OPCONOutsourceRequests> recievedOutsourceRequests = new List<OPCONOutsourceRequests>();
    List<OPCONOutsourceRequests> sentOutsourceRequests = new List<OPCONOutsourceRequests>();

    bool _sentOutsourceIsExpanded = true;
    bool _recievedOutsourceIsExpanded = true;
    bool isChangingEvaluationStatus = false;
    bool _loadingRecievedRequests;
    bool _loadingSentRequests;

    UserModel currentUser;
    List<RequestsModel> sentRequests = new List<RequestsModel>();
    List<RequestsModel> recievedRequests = new List<RequestsModel>();

    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }


    public async void _UpdateRequestsStatus(String newStatus, OPCONOutsourceRequests context)
    {
        context.status = newStatus;
        context.request.status = newStatus;

        if (newStatus == "Awaiting second response")
        {
            if(context.request.requestTarget1 == currentUser.userID)
            {
                context.request.requestTarget1 = context.request.requestTarget2;
            }
            context.request.requestTarget2 = null;
        }
        await requestsData.UpdateRequest(context.request);
        StateHasChanged();
    }

    private void OpenDialog(OPCONOutsourceRequests context)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        void UpdateRequestsStatus(String newStatus)
        {
            _UpdateRequestsStatus(newStatus, context);
        }

        parameters.Add("UpdateStatus", UpdateRequestsStatus);
        parameters.Add("CurrentStatus", context.request.status);
        parameters.Add("canApproveOrDeny", (currentUser.userID == context.request.requestTarget1
                                          || currentUser.userID == context.request.requestTarget2));
        parameters.Add("newTeam", (context.newTeam));
        parameters.Add("user", context.user);
        DialogService.Show<OPCONOutsourceDialog>("Request Data", parameters, options);
    }


    protected async override Task OnInitializedAsync()
    {
        _loadingRecievedRequests = true;
        await GetLogin();

        recievedRequests = await requestsData.GetRecievedRequests(currentUser.userID);
        for (int i = 0; i < recievedRequests.Count; i++)
        {
            RequestsModel request = recievedRequests[i];

            if (request.type == "OPCONOutsourceRequest")
            {
                OPCONOutsourceRequests newRequest = new OPCONOutsourceRequests();

                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.user = await userData.GetUser(request.values[0]);
                newRequest.newTeam = await teamsData.GetTeam(request.requestTarget2);

                recievedOutsourceRequests.Add(newRequest);
            }
        }
        _loadingRecievedRequests = false;


        _loadingSentRequests = true;
        sentRequests = await requestsData.GetSentRequests(currentUser.userID);
        for (int i = 0; i < sentRequests.Count; i++)
        {
            RequestsModel request = sentRequests[i];

            if (request.type == "OPCONOutsourceRequest")
            {
                OPCONOutsourceRequests newRequest = new OPCONOutsourceRequests();

                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.user = await userData.GetUser(request.values[0]);
                newRequest.newTeam = await teamsData.GetTeam(request.requestTarget2);

                sentOutsourceRequests.Add(newRequest);
            }
        }
        _loadingSentRequests = false;

    }
    

  
}
