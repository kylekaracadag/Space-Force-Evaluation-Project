@page "/"
@using NUnit.Framework
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@inject NavigationManager navManager
@inherits LayoutComponentBase
<PageTitle>Login</PageTitle>
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<head>
    <style>
        .container-grid {
            margin:auto;
            padding-top:150px;
            border-radius: 15px;
        }
    </style>
</head>

<!--Main Body-->
<body>
<AuthorizeView>
    <Authorized>
        <!--Container grid for the survey options-->
            <div class="container-grid">
            <div>
                    <MudSimpleTable Style="overflow-x: auto; background-color: #003B73" Elevation="0">
                        <tbody>
  
                                <tr>
                                    <td>
                                        <MudCard width="100%" height="150px">
                                            <MudCardContent>
                                                <h2>Daily Survey</h2>
                                                @if(lastDaily)
                                                {
                                                    <p>Survey Complete</p>
                                                }
                                            </MudCardContent>
                                            @if (!@lastDaily)
                                            {
                                                <MudCardActions>
                                                    <MudButton OnClick="() => navigateToSurvey()" Variant="Variant.Text" Color="Color.Primary">Begin</MudButton>
                                                </MudCardActions>
                                            }
                                        </MudCard>
                                    </td>
                                <td>
                                    <MudCard width="100%" height="150px">
                                        <MudCardContent>
                                            <h2>Weekly Survey</h2>
                                            @if (lastWeekly)
                                            {
                                                <p>Survey Complete</p>
                                            }
                                        </MudCardContent>
                                        @if (!@lastWeekly)
                                        {
                                            <MudCardActions>
                                                <MudButton OnClick="() => navigateToSurvey()" Variant="Variant.Text" Color="Color.Primary">Begin</MudButton>
                                            </MudCardActions>
                                        }
                                    </MudCard>
                                </td>
                                                                    <td>
                                        <MudCard width="100%" height="150px">
                                            <MudCardContent>
                                                <h2>Monthly Survey</h2>
                                                @if(lastMonthly)
                                                {
                                                    <p>Survey Complete</p>
                                                }
                                            </MudCardContent>
                                            @if (!@lastMonthly)
                                            {
                                                <MudCardActions>
                                                    <MudButton OnClick="() => navigateToSurvey()" Variant="Variant.Text" Color="Color.Primary">Begin</MudButton>
                                                </MudCardActions>
                                            }
                                        </MudCard>
                                    </td>
                                </tr>
                        </tbody>
                    </MudSimpleTable>

                    <MudSimpleTable Style="background-color: #003B73" Elevation="0">
                        <tbody>

            <tr>
                                <td></td>
                                <td>
                    <MudCard width="100%" Elevation="0" Style="background-color: #003B73;">
                            <MudCardContent>
                                    @if (@lastDaily || @lastWeekly || @lastMonthly)
                                    {

                                <h3>Thank you, your response has been noted.</h3>
                                <div class="flex">
                                    <article class="col-2">
                                        <input type="button" class="btn btn-primary" value="Log Out" onclick="location.href='MicrosoftIdentity/Account/SignOut'" />
                                    </article>

                                    <article class="col-2">
                                        <input type="button" class="btn btn-primary" value="Provide feedback on Teams" onclick="window.open('https://dod.teams.microsoft.us/l/team/19%3adod%3a2bf5dee9da7546c494c8d3b5f52f5878%40thread.tacv2/conversations?groupId=cebcc84c-7f65-4e78-9bf8-da0af1e01ded&tenantId=8331b18d-2d87-48ef-a35f-ac8818ebf9b4')" />
                                    </article>

                                    <article class="col-2">
                                        <input type="button" class="btn btn-primary" value="Offer additional accolades" onclick="location.href='/Accolades'" />
                                    </article>
                                </div>
                                    }
                        </MudCardContent>
                    </MudCard>

                </td>
                                <td></td>
            </tr>
            </tbody>
            </MudSimpleTable>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <!--Container to login if the user is not authorized-->
            @{
                try
                {
                    var hasJSRuntime = navManager != null && (navManager.GetType()?.GetProperty("HasAttachedJSRuntime") != null ?
                    (bool)navManager.GetType().GetProperty("HasAttachedJSRuntime").GetValue(navManager) : true);

                    if (hasJSRuntime)
                    {
                        navManager.NavigateTo("MicrosoftIdentity/Account/SignIn", true);
                    }

                }
                catch
                {
                    <div class="container">
                        <div class="col-2">
                            <input type="button" class="btn btn-primary" value="Login" onclick="location.href='MicrosoftIdentity/Account/SignIn'" />
                        </div>
                    </div>
                }
            }

    </NotAuthorized>
</AuthorizeView>

</body>
@code
{
    DateTime today;
    DateTime lastSurvey;
    DateTime lastSurveyWeekly;
    DateTime lastSurveyMonthly;
    public bool lastDaily = false;
    public bool lastWeekly = false;
    public bool lastMonthly = false;
    public string showDailyButton = "";
    public string showWeeklyButton = "";
    public string showMonthlyButton = "";
    public string userName;
    public string userObjectID;
    public string emailAddress;
    public string userLastName;
    public string userFirstName;

    private UserModel loggedInUser = new UserModel();

    

    private void navigateToSurvey()
    {
        navManager.NavigateTo("/Survey");
    }
    // Function to check that the user is logged in, and get the information from their b2c profile
    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectID = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
        string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
        string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
        string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;

        // If the user is logged in, and they have an account
        if(string.IsNullOrWhiteSpace(objectID) == false)
        {

            // set local variables to the logged in session so that they can be used
            userObjectID = objectID;
            userName = displayName;
            emailAddress = email;
            userLastName = lastName;
            userFirstName = firstName;

            loggedInUser.ObjectIdentifier = userObjectID;
            loggedInUser.firstName = userFirstName;
            loggedInUser.lastName = userLastName;
            loggedInUser.email = emailAddress;
            loggedInUser.userID = userObjectID;


            var checkUser = await userData.GetUser(userObjectID);
            if (checkUser == null)
            {
                await userData.CreateUser(loggedInUser);                  
            }
        }

        // Get who is logged in
        UserModel currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        if (currentUser != null)
        {
            checkDailySurveyEligible(currentUser);
            checkWeeklySurveyEligible(currentUser);
            checkMonthlySurveyEligible(currentUser);
        }

    }

    // Function to check if the user is eligible to take the daily survey
    private void checkDailySurveyEligible(UserModel currentUser)
    {
        today = DateTime.Today;
        lastSurvey = currentUser.dailyDate;
        if ((today - lastSurvey).TotalDays > 0)
        {
            lastDaily = false;
        }
        else
        {
            lastDaily = true;
            showDailyButton = "hidden";
        }

    }
    private void checkWeeklySurveyEligible(UserModel currentUser)
    {
        lastSurveyWeekly = currentUser.weeklyDate;
        if ((today - lastSurveyWeekly).TotalDays > 7)
        {
            lastWeekly = false;
        }
        else
        {
            lastWeekly = true;
            showWeeklyButton = "hidden";
        }
    }
    private void checkMonthlySurveyEligible(UserModel currentUser)
    {
        // Set the total days back to 30 when feedback is finished being collected. 
        lastSurveyMonthly = currentUser.monthlyDate;
        if ((today - lastSurveyMonthly).TotalDays > 30)
        {
            lastMonthly = false;
        }
        else
        {
            lastMonthly = true;
            showMonthlyButton = "hidden";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();
    }

}
