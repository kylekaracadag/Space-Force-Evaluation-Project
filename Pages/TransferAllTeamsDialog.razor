@inject IUserData userData
@inject IRequestsData requestsData
@inject ISnackbar Snackbar
@inject ITeamsData teamsData
@inject IADCONData ADCONData

<MudDialog>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                

                @if(teamsToTransferView != null && teamsToTransferView.Count > 0)
                {
                    <MudInput Style="width: 100%" FullWidth="true" T="string" Placeholder="New Supervising Commander's Email" @bind-Value="newCommanderEmail" />
                    <MudText Style="padding-top: 25px; padding-below: 25px">Are you sure that you would like to tranfer all teams shown below:</MudText>
                    <MudTable Items="@teamsToTransferView" Hover="true" Loading="@isLoading">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Leader</MudTh>
                            <MudTh></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd>@context.teamName</MudTd>
                            <MudTd>@context.teamLeader.firstName</MudTd>
                        </RowTemplate>
                    </MudTable>
                    <MudText Style="font-weight: bold; padding-top: 25px" Align="Align.Center">This action cannot be undone</MudText>

                }
                else if(teamsToTransferView == null || teamsToTransferView.Count == 0)
                {
                    <MudText Style="font-weight: bold" Align="Align.Center">No teams to transfer</MudText>
                }
                

            </MudItem>
        </MudGrid>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (teamsToTransferView != null && teamsToTransferView.Count > 0)
        {
            <MudButton OnClick="HandleTeamTransfer" Color="Color.Error">Transfer</MudButton>
        }
    </DialogActions>


</MudDialog>



@code {
    public class TeamView
    {
        public UserModel teamLeader;
        public string teamName;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel currentUser { get; set; }

    public String newCommanderEmail = "";
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    List<TeamsModel> teamsToTransfer;
    List<TeamView> teamsToTransferView = new List<TeamView>();
    bool isLoading = false;

    public async Task HandleTeamTransfer()
    {
        UserModel newSupervisingCommander = await userData.GetUserByEmail(newCommanderEmail);

        if(newSupervisingCommander == null)
        {
            Snackbar.Add($"ERROR: Unable to transfer team. User not found.", Severity.Error);
            return;
        }

        if(newSupervisingCommander.role != "Commander" && newSupervisingCommander.role != "HQ")
        {
            Snackbar.Add($"ERROR: Unable to transfer team. User is not a Commander or HQ.", Severity.Error);
            return;
        }

        await teamsData.TransferAllUserTeams(teamsToTransfer, newSupervisingCommander);
        Snackbar.Add($"SUCCESS: all teams have been transferred. Refresh to see changes.", Severity.Success);
    }

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        teamsToTransfer = await teamsData.GetTeamsByCreator(currentUser.userID);

        foreach (var team in teamsToTransfer)
        {
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamName = team.name;

            teamsToTransferView.Add(tempTeam);
        }
        isLoading = false;
    }

}
