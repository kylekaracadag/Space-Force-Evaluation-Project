@page "/my-teams"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ITeamsData teamsData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService


<PageTitle>Team Management</PageTitle>

<head>
    <link rel="stylesheet" href="/css/fonts.css" />
</head>

<div>

    <MudPaper Class="mt-15 mb-3 pa-2" Elevation="4" Style="border-radius: 15px; background: #E7F1FF">
        <!-- 
        <MudDataGrid Items="@teams" MultiSelection="true" Hideable="true" Loading="@isLoading" Elevation="4" Style="border-radius: 15px; background: #E7F1FF">
        <ToolBarContent>
            <MudText Typo="Typo.h5">Teams</MudText>
            <MudSpacer />
            @if(currentUser != null && (currentUser.role == "Commander" || currentUser.role == "HQ"))
            {
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenCreateTeamDialog())">Create Team</MudButton>
            }
        </ToolBarContent>
        <Columns >
            <Column T="TeamsModel" Field="" Title="Operation Name" />
            <Column T="TeamsModel" Field="lastName" Title="Operation leader" />
            <Column T="TeamsModel" Filterable="false" Hideable="false">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenCreateTeamDialog())">
                        View More
                    </MudButton>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>
        -->


        <MudNavGroup Title="My Teams" @bind-Expanded=_myteamsExpanded>
            @if (currentUser != null && (currentUser.role == "Commander" || currentUser.role == "HQ"))
            {
                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenCreateTeamDialog())">Create Team</MudButton>
            }
            <MudTable Items="@teams" Hover="true" Loading="@isLoading">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Leader</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.teamName</MudTd>
                    <MudTd>@context.teamLeader.firstName</MudTd>

                    <MudTd>
                        <MudButton OnClick="@(() => OpenViewTeamDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                            View More
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudNavGroup>
    </MudPaper>
</div>



@code {

    public class TeamView
    {
        public UserModel teamLeader;
        public List<UserModel> teamMembers;
        public string teamName;
        public TeamsModel team;
    }

    UserModel currentUser;
    List<TeamView> teams = new ();
    List<TeamsModel> teamsCurrentUserLeads = new();
    List<TeamsModel> teamsCurrentUserIsMember = new();

    bool isLoading = true;
    bool _myteamsExpanded = true;

    private void OpenCreateTeamDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("currentUser", currentUser);

        DialogService.Show<CreateTeamDialog>("Team Creation", parameters, options );
    }


    private void OpenViewTeamDialog(TeamView context)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("currentUser", currentUser);
        parameters.Add("team", context.team);

        DialogService.Show<ViewTeamDialog>("Team", parameters, options);
    }


    protected async override Task OnInitializedAsync()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        isLoading = true;

        teamsCurrentUserLeads = await teamsData.GetTeamsByLeader(currentUser.userID);
        teamsCurrentUserIsMember = await teamsData.GetTeamsByMember(currentUser.userID);

        foreach (var team in teamsCurrentUserLeads)
        {
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamName = team.name;
            tempTeam.teamMembers = new List<UserModel>();
            tempTeam.team = team;

            foreach(var member in team.members)
            {
                tempTeam.teamMembers.Add(await userData.GetUser(member));
            }

            teams.Add(tempTeam);
        }


        foreach (var team in teamsCurrentUserIsMember)
        {
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamName = team.name;
            tempTeam.teamMembers = new List<UserModel>();
            tempTeam.team = team;

            foreach (var member in team.members)
            {
                tempTeam.teamMembers.Add(await userData.GetUser(member));
            }

            teams.Add(tempTeam);
        }

        isLoading = false;
    }
  
}
