@page "/my-teams"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ITeamsData teamsData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService


<PageTitle>Team Management</PageTitle>

<head>
    <link rel="stylesheet" href="/css/fonts.css" />
</head>

<div>

    <MudPaper Class="mt-15 mb-3 pa-2" Elevation="4" Style="border-radius: 15px; background: #E7F1FF">

        <MudNavGroup Title="My Teams" @bind-Expanded=_myteamsExpanded Style="font-family: 'HelveticaNeueBold';
            font-style: normal;
            font-weight: 400;
            font-size: 200%;">
            @if (currentUser != null && (currentUser.role == "Commander" || currentUser.role == "HQ"))
            {
                <MudButton Style="font-family: HelveticaNeueMedium; left: 10px; bottom: 10px;" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenCreateTeamDialog())">Create Team</MudButton>
                <MudButton Style="font-family: HelveticaNeueMedium; left: 10px; bottom: 10px;" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenTransferAllTeamsDialog())">Transfer All Teams</MudButton>
            }
            <MudTable Items="@teams" Hover="true" Loading="@isLoading">
                <HeaderContent>
                    <MudTh style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 70%;">Name</MudTh>
                    <MudTh style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 70%;">Leader</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 50%;">@context.teamName</MudTd>
                    <MudTd style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 50%;">@context.teamLeader.firstName</MudTd>

                    <MudTd>
                        <MudButton Style="font-family: HelveticaNeueMedium;" OnClick="@(() => OpenViewTeamDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                            View More
                        </MudButton>
                    </MudTd>

                    @if (currentUser != null && (context.teamCreator.userID == currentUser.userID))
                    {
                        <MudTd>
                            <MudButton OnClick="() => OpenUpdateTeamLeaderTeamDialog(context.team)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="font-family: helveticaNeueMedium;">
                                Change Team Leader
                            </MudButton>
                        </MudTd>
                        
                        <MudTd>
                            <MudButton OnClick="() => OpenTransferTeamDialog(context.team)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="font-family: helveticaNeueMedium;">
                                Transfer Team
                            </MudButton>
                        </MudTd>

                        <MudTd>
                            <MudButton OnClick="() => OpenDeleteTeamDialog(context.team)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="font-family: helveticaNeueMedium;">
                                Delete Team
                            </MudButton>
                        </MudTd>
                    }
                    else if (currentUser != null && (context.teamLeader.userID == currentUser.userID && (currentUser.role == "HQ" || currentUser.role == "Commander")))
                    {
                        <MudTd>
                            <MudButton OnClick="() => OpenDeleteTeamDialog(context.team)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style="font-family: helveticaNeueMedium;">
                                Delete Team
                            </MudButton>
                        </MudTd>
                    }
                    
                </RowTemplate>
            </MudTable>
        </MudNavGroup>
    </MudPaper>
</div>



@code {

    public class TeamView
    {
        public UserModel teamLeader;
        public List<UserModel> teamMembers;
        public string teamName;
        public TeamsModel team;
        public UserModel teamCreator;
    }

    UserModel currentUser;
    List<TeamView> teams = new ();
    List<TeamsModel> teamsCurrentUserLeads = new();
    List<TeamsModel> teamsCurrentUserIsMember = new();
    List<TeamsModel> teamsCurrentUserCreated = new();

    bool isLoading = true;
    bool _myteamsExpanded = true;

    private void OpenCreateTeamDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("currentUser", currentUser);

        DialogService.Show<CreateTeamDialog>("Team Creation", parameters, options );
    }

    private void OpenDeleteTeamDialog(TeamsModel teamToDelete)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("teamToDelete", teamToDelete);

        DialogService.Show<DeleteTeamDialog>("Delete Team", parameters, options);
    }

    private void OpenTransferTeamDialog(TeamsModel teamToTransfer)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("teamToTransfer", teamToTransfer);

        DialogService.Show<TransferTeamDialog>("teamToTransfer Team", parameters, options);
    }

    private void OpenTransferAllTeamsDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        parameters.Add("currentUser", currentUser);
        DialogService.Show<TransferAllTeamsDialog>("Transfer Team", parameters, options);
    }

    private void OpenUpdateTeamLeaderTeamDialog(TeamsModel teamToUpdateLeader)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        parameters.Add("teamToUpdateLeader", teamToUpdateLeader);


        DialogService.Show<UpdateTeamLeaderDialog>("Update Team Leader", parameters, options);
    }


    private void OpenViewTeamDialog(TeamView context)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("currentUser", currentUser);
        parameters.Add("team", context.team);

        DialogService.Show<ViewTeamDialog>("Team", parameters, options);
    }


    protected async override Task OnInitializedAsync()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        isLoading = true;

        teamsCurrentUserLeads = await teamsData.GetTeamsByLeader(currentUser.userID);
        teamsCurrentUserIsMember = await teamsData.GetTeamsByMember(currentUser.userID);
        teamsCurrentUserCreated = await teamsData.GetTeamsByCreator(currentUser.userID);

        foreach (var team in teamsCurrentUserLeads)
        {
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamCreator = await userData.GetUser(team.creator);
            tempTeam.teamName = team.name;
            tempTeam.teamMembers = new List<UserModel>();
            tempTeam.team = team;

            foreach(var member in team.members)
            {
                tempTeam.teamMembers.Add(await userData.GetUser(member));
            }

            teams.Add(tempTeam);
        }


        foreach (var team in teamsCurrentUserIsMember)
        {
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamCreator = await userData.GetUser(team.creator);
            tempTeam.teamName = team.name;
            tempTeam.teamMembers = new List<UserModel>();
            tempTeam.team = team;

            foreach (var member in team.members)
            {
                tempTeam.teamMembers.Add(await userData.GetUser(member));
            }

            teams.Add(tempTeam);
        }


        foreach (var team in teamsCurrentUserCreated)
        {
            if(team.creator == team.leader && team.leader == currentUser.userID)
            {
                continue; 
            }
            TeamView tempTeam = new TeamView();

            tempTeam.teamLeader = await userData.GetUser(team.leader);
            tempTeam.teamCreator = await userData.GetUser(team.creator);
            tempTeam.teamName = team.name;
            tempTeam.teamMembers = new List<UserModel>();
            tempTeam.team = team;

            foreach (var member in team.members)
            {
                tempTeam.teamMembers.Add(await userData.GetUser(member));
            }

            teams.Add(tempTeam);
        }

        isLoading = false;
    }
  
}
