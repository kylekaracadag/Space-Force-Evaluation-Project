@page "/Profile"
@attribute [Authorize]
@inject ISurveyData surveyData
@inject IUserData userData
@inject NavigationManager navMangager
@inject AuthenticationStateProvider authProvider
@inject IAccoladeData accoladeData

<div class="mainDiv" style = "padding-top: 100px;">
    <div class="container grid"> 
        <!--User Profile Information-->
        <section class="card">
            
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <h3 class="profile-header" style="text-align: center" >My Profile</h3>
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Name: @firstName @lastName</h5>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Email: @emailAddress</h5>
                        </MudItem>
                    </MudGrid>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Rank: @rank</h5>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Job: @job</h5>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Team: @team</h5>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
           
        </section>

        <section class="card">
            <h3 class="account-options" style="text-align: center" >Account Options</h3>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" >
                        Update First/Last Name
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" >
                        Update Rank
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" >
                        Update Job
                    </MudButton>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" >
                        Update Team
                    </MudButton>
                </MudItem>
            </MudGrid>
            <div class="flexbox">
                
                
                
            </div>

            <div class="accountupdate">
                <div style="display: @showUpdateRank">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleRankUpdate">
                        <!--Update User Rank-->
                        <label> Rank
                            <InputSelect @bind-Value="userModel.rank">
                                <option value="">Select Rank...</option>
                                <option value="Specialist One (Spc1/E-1)">Specialist One (Spc1/E-1)</option>
                                <option value="Specialist Two (Spc2/E-2)">Specialist Two (Spc2/E-2)</option>
                                <option value="Specialist Three (Spc3/E-3)">Specialist Three (Spc3/E-3)</option>
                                <option value="Specialist Four (Spc4/E-4)">Specialist Four (Spc4/E-4)</option>
                                <option value="Sergeant (Sgt/E-5)">Sergeant (Sgt/E-5)</option>
                                <option value="Technical Sergeant (TSgt/E-6)">Technical Sergeant (TSgt/E-6)</option>
                                <option value="Second Lieutenant (2d Lt/0-1)">Second Lieutenant (2d Lt/0-1)</option>
                                <option value="First Lieutenant (1st LD/0-2)">First Lieutenant (1st LD/0-2)</option>
                                <option value="Captain (Capt/0-3)">Captain (Capt/0-3)</option>
                                <option value="Major (Maj/0-4)">Major (Maj/0-4)</option>
                                <option value="Lieutenant Colonel (Lt Col/0-5)">Lieutenant Colonel (Lt Col/0-5)</option>
                            </InputSelect>
                        </label>
                        <button type="submit">Submit</button>
                    </EditForm>
                </div>

                <!--Update User Job-->

                <div style="display: @showUpdateJob">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleJobUpdate">
                        <label> Job Title
                            <InputText @bind-Value="userModel.job"></InputText>
                        </label>
                        <button type="submit">Submit</button>
                    </EditForm>
                </div>

                    <!--Update User Team-->

                <div style="display: @showUpdateTeam">
                    <EditForm Model="@userModel" OnValidSubmit="@HandleTeamUpdate">
                        <label>Team ID
                            <InputSelect @bind-Value="userModel.teamID">
                                <option value="">Select Team...</option>
                                <option value="Sales">Sales</option>
                                <option value="Accounting">Accounting</option>
                                <option value="Management">Management</option>
                                <option value="Human Resources">Human Resources</option>
                            </InputSelect>
                        </label>
                        <button type="submit">Submit</button>
                    </EditForm>
                </div>
            </div>

        </section>

        <!--User Survey History-->
        <section class="card">
            <h2 class="survey-history" style="text-align: center" >Survey History</h2>
            <p>These are the surveys that you have completed.</p>
            <div class="scroll">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>QuestionID</th>
                            <th>Question Text</th>
                            <th>Response</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var SurveyModel in surveys)
                        {
                            <tr>
                                <td>@SurveyModel.surveyID</td>
                                <td>@SurveyModel.question</td>
                                <td>@SurveyModel.response</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </section>

        <!--User Received Accolades-->
        <section class="card">
            <h2 class="personal-accolades" style="text-align: center" >Personal Accolades</h2>

            <div class="content">
                <h4 class="accolade-rank" style="text-align: center" >Your accolade rank:</h4>
                <img class="rank" style ="display: block; margin: 0 auto;" src="@accoladesRank"/>
                <div class="hide" style="text-align: center"> <b>@rankName</b> </div>
            </div>


            <p>*These are accolades that have been awarded anonymously from your team members</p>
            <div class="scroll">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Accolade:</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach(var AccoladeModel in accolades)
                        {
                            <tr>
                                <td>@AccoladeModel.text</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </section>
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private UserModel userModel = new UserModel();
    private string firstName, lastName, emailAddress, rank, job, team = "";
    private string accoladesRank;
    private string rankName;
    private string showUpdateRank = "none";
    private string showUpdateJob = "none";
    private string showUpdateTeam = "none";
    private string editB2Cinfo = "https://spaceforceevaluationsauth.b2clogin.com/spaceforceevaluationsauth.onmicrosoft.com/oauth2/v2.0/authorize?p=B2C_1_edit&client_id=90f2a18e-4d4b-48c3-b9b5-444253a6400d&nonce=defaultNonce&redirect_uri=https%3A%2F%2Fspaceforceevaluations.azurewebsites.net%2Fsignin-oidc&scope=openid&response_type=id_token&prompt=login";
    private SurveyModel surveyModel = new SurveyModel();
    List<SurveyModel> surveys = new List<SurveyModel>();
    List<AccoladeModel> accolades = new List<AccoladeModel>();

    // Link the user to B2C to update their B2C specific information
    private void UpdateB2CInfo()
    {
        navMangager.NavigateTo(editB2Cinfo);
    }
    private void ShowUpdateTeam()
    {
        if (showUpdateTeam == "none")
        {
            showUpdateTeam = "";
            showUpdateRank = "none";
            showUpdateJob = "none";
        }
        else
        {
            showUpdateTeam = "none";
        }
    }
    private void ShowUpdateJob()
    {
        if (showUpdateJob == "none")
        {
            showUpdateTeam = "none";
            showUpdateRank = "none";
            showUpdateJob = "";
        }
        else
        {
            showUpdateJob = "none";
        }
    }
    private void ShowUpdateRank()
    {
        if (showUpdateRank == "none")
        {
            showUpdateTeam = "none";
            showUpdateRank = "";
            showUpdateJob = "none";
        }
        else
        {
            showUpdateRank = "none";
        }
    }

    // Functions for handling various updates for the user profile
    private async Task HandleTeamUpdate()
    {
        team = userModel.teamID;
        await UpdateUserTeam();
    }
    private async Task HandleRankUpdate()
    {
        rank = userModel.rank;
        await UpdateUserRank();
    }
    private async Task HandleJobUpdate()
    {
        job = userModel.job;
        await UpdateUserJob();
    }
    private async Task UpdateUserTeam()
    {
        loggedInUser.teamID = team;
        await userData.UpdateUser(loggedInUser);
    }
    private async Task UpdateUserJob()
    {
        loggedInUser.job = job;
        await userData.UpdateUser(loggedInUser);
    }
    private async Task UpdateUserRank()
    {
        loggedInUser.rank = rank;
        await userData.UpdateUser(loggedInUser); 
    }
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        firstName = loggedInUser.firstName;
        lastName = loggedInUser.lastName;
        emailAddress = loggedInUser.email;
        rank = loggedInUser.rank;
        job = loggedInUser.job;
        team = loggedInUser.teamID;
        await GetUserSurveys();
        await GetAccoladesAboutUser();
        await GetAccoladeRank();
    }

    // Function to get a list of accolades about the user
    private async Task <List<AccoladeModel>> GetAccoladesAboutUser()
    {
        var userAccolades = await accoladeData.GetSubjectAccolades(loggedInUser.userID);
        accolades = userAccolades.ToList();
        return accolades;
    }

    // Function assigning arbitrary values to give "ranking" based on number of received accolades
    private async Task GetAccoladeRank()
    {
        if (accolades.Count() > 10)
        {
            rankName = "Silver";
            accoladesRank = "https://i.imgur.com/qBEYeux.png";
        }
        else if (accolades.Count() > 20)
        {
            rankName = "Gold";
            accoladesRank = "https://i.imgur.com/xt4409s.png";
        }
        else if (accolades.Count() > 30)
        {
            rankName = "Platinum";
            accoladesRank = "https://i.imgur.com/rK2dM1w.png";
        }
        else
        {
            rankName = "Bronze";
            accoladesRank = "https://i.imgur.com/AhFMQ2P.png";
        }
    }
    // Function to get a list of all surveys the user has taken
    private async Task <List<SurveyModel>> GetUserSurveys()
    {
        var userSurveys = await surveyData.GetListOfSurveys(loggedInUser.userID);
        surveys = userSurveys.ToList();
        return surveys;
    }

}