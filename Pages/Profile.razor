@page "/Profile"
@attribute [Authorize]
@inject ISurveyData surveyData
@inject IUserData userData
@inject NavigationManager navMangager
@inject AuthenticationStateProvider authProvider
@inject IAccoladeData accoladeData

<div class="mainDiv" style = "padding-top: 100px;">
    <div class="container grid">
        <!--User Profile Information-->
        <section class="card">

            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <h3 class="profile-header" style="text-align: center">My Profile</h3>
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Name: @firstName @lastName</h5>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Email: @emailAddress</h5>
                        </MudItem>
                    </MudGrid>
                </MudItem>

                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudGrid>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Rank: @rank</h5>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                            <h5 class="infotext">Job: @job</h5>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>

        </section>

        <section class="card">
            <h3 class="account-options" style="text-align: center">Account Options</h3>
            <MudGrid>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton OnClick="ShowUpdateFirstAndLastName" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                        Update First/Last Name
                    </MudButton>
                    <div style="display: @showUpdateName">
                        <MudInput FullWidth="true" T="string" Placeholder="New First Name" @bind-Value="inputFirstName" />
                        <MudInput FullWidth="true" T="string" Placeholder="New Last Name" @bind-Value="inputLastName" />

                        <div>
                            <MudButton OnClick="UpdateFirstAndLastNameUpdate">Submit</MudButton>
                        </div>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="ShowUpdateRank">
                        Update Rank
                    </MudButton>
                    <div style="display: @showUpdateRank">
                        <MudSelect @bind-Value="selectedRank" Label="Rank" Placeholder="Select Rank" AdornmentColor="Color.Primary">
                            <MudSelectItem T="String" Value="@null" Disabled="true">Your Teams</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Specialist One (Spc1/E-1)")">Specialist One (Spc1/E-1)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Specialist Two (Spc2/E-2)")">Specialist Two (Spc2/E-2)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Specialist Three (Spc3/E-3)")">Specialist Three (Spc3/E-3)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Specialist Four (Spc4/E-4)")">Specialist Four (Spc4/E-4)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Sergeant (Sgt/E-5)")">Sergeant (Sgt/E-5)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Technical Sergeant (TSgt/E-6)")">Technical Sergeant (TSgt/E-6)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Second Lieutenant (2d Lt/0-1)")">Second Lieutenant (2d Lt/0-1)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("First Lieutenant (1st LD/0-2)")">First Lieutenant (1st LD/0-2)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Captain (Capt/0-3)")">Captain (Capt/0-3)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Major (Maj/0-4)")">Major (Maj/0-4)</MudSelectItem>
                            <MudSelectItem T="String" Value="@("Lieutenant Colonel (Lt Col/0-5)")">Lieutenant Colonel (Lt Col/0-5)</MudSelectItem>
                        </MudSelect>
                        <MudButton OnClick="HandleRankUpdate">Submit</MudButton>
                    </div>
                </MudItem>
                <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="ShowUpdateJob">
                        Update Job
                    </MudButton>
                    <div style="display: @showUpdateJob">
                        <MudInput FullWidth="true" T="string" Placeholder="New job title" @bind-Value="inputJob" />
                        <div>
                            <MudButton OnClick="HandleJobUpdate">Submit</MudButton>
                        </div>
                    </div>
                </MudItem>
            </MudGrid>
        </section>
    </div>
</div>

@code {
    private UserModel loggedInUser;
    private UserModel userModel = new UserModel();
    private string firstName, lastName, emailAddress, rank, job, team = "";
    private string accoladesRank;
    private string rankName;
    private string showUpdateRank = "none";
    private string showUpdateJob = "none";
    private string showUpdateTeam = "none";
    private string editB2Cinfo = "https://Group19SpaceForce.b2clogin.com/Group19SpaceForce.onmicrosoft.com/oauth2/v2.0/authorize?p=B2C_1_profile_editing&client_id=e8648150-4ad1-4cd3-8934-2e0b0c92316d&nonce=defaultNonce&redirect_uri=https%3A%2F%2Flocalhost%3A7209%2F&scope=openid&response_type=id_token&prompt=login";
    private SurveyModel surveyModel = new SurveyModel();
    List<SurveyModel> surveys = new List<SurveyModel>();
    List<AccoladeModel> accolades = new List<AccoladeModel>();
    public String selectedRank = "";
    public String inputJob = "";
    public String inputFirstName = "";
    public String inputLastName = "";
    public string showUpdateName = "none";

    // Link the user to B2C to update their B2C specific information
    private void UpdateB2CInfo()
    {
        navMangager.NavigateTo(editB2Cinfo);
    }

    private void ShowUpdateJob()
    {
        if (showUpdateJob == "none")
        {
            showUpdateTeam = "none";
            showUpdateRank = "none";
            showUpdateName = "none";
            showUpdateJob = "";
        }
        else
        {
            showUpdateJob = "none";
        }
    }
    private void ShowUpdateRank()
    {
        if (showUpdateRank == "none")
        {
            showUpdateTeam = "none";
            showUpdateRank = "";
            showUpdateJob = "none";
            showUpdateName = "none";
        }
        else
        {
            showUpdateRank = "none";
        }
    }

    private void ShowUpdateFirstAndLastName()
    {
        if (showUpdateName == "none")
        {
            showUpdateTeam = "none";
            showUpdateName = "";
            showUpdateJob = "none";
            showUpdateRank = "none";
        }
        else
        {
            showUpdateName = "none";
        }
    }


    private async Task HandleRankUpdate()
    {
        if (selectedRank != null && selectedRank != "")
        {
            rank = selectedRank;
            await UpdateUserRank();
        }
    }

    private async Task HandleJobUpdate()
    {
        if(inputJob != null && inputJob != "")
        {
            job = inputJob;
            await UpdateUserJob();
        }
    }

    private async Task UpdateFirstAndLastNameUpdate()
    {
        if(inputFirstName != null && inputFirstName != "")
        {
            loggedInUser.firstName = inputFirstName;
            firstName = inputFirstName;
        }

        if(inputFirstName != null && inputLastName != "")
        {
            loggedInUser.lastName = inputLastName;
            lastName = inputLastName;
        }

        await userData.UpdateUser(loggedInUser);
    }


    private async Task UpdateUserJob()
    {
        loggedInUser.job = inputJob;
        await userData.UpdateUser(loggedInUser);
    }

    private async Task UpdateUserRank()
    {        
        loggedInUser.rank = selectedRank;
        await userData.UpdateUser(loggedInUser);
    }

    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        firstName = loggedInUser.firstName;
        lastName = loggedInUser.lastName;
        emailAddress = loggedInUser.email;
        rank = loggedInUser.rank;
        job = loggedInUser.job;
        team = loggedInUser.teamID;
        await GetUserSurveys();
        await GetAccoladesAboutUser();
        await GetAccoladeRank();
    }

    // Function to get a list of accolades about the user
    private async Task <List<AccoladeModel>> GetAccoladesAboutUser()
    {
        var userAccolades = await accoladeData.GetSubjectAccolades(loggedInUser.userID);
        accolades = userAccolades.ToList();
        return accolades;
    }

    // Function assigning arbitrary values to give "ranking" based on number of received accolades
    private async Task GetAccoladeRank()
    {
        if (accolades.Count() > 10)
        {
            rankName = "Silver";
            accoladesRank = "https://i.imgur.com/qBEYeux.png";
        }
        else if (accolades.Count() > 20)
        {
            rankName = "Gold";
            accoladesRank = "https://i.imgur.com/xt4409s.png";
        }
        else if (accolades.Count() > 30)
        {
            rankName = "Platinum";
            accoladesRank = "https://i.imgur.com/rK2dM1w.png";
        }
        else
        {
            rankName = "Bronze";
            accoladesRank = "https://i.imgur.com/AhFMQ2P.png";
        }
    }
    // Function to get a list of all surveys the user has taken
    private async Task <List<SurveyModel>> GetUserSurveys()
    {
        var userSurveys = await surveyData.GetListOfSurveys(loggedInUser.userID);
        surveys = userSurveys.ToList();
        return surveys;
    }

}