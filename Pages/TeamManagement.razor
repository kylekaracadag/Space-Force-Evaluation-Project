@page "/Teammanagement"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject IAccoladeData accoladeData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService


<PageTitle>Team Management</PageTitle>

<div>
    <!-- <MudDataGrid T="Element" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">-->
    <!-- <div class="d-flex flex-wrap mt-4">  -->

    <MudPaper Width="400px" Class="py-3 mb-4" Elevation="1">
        <MudNavMenu>
            <MudNavGroup Title="Additional Filters" @bind-Expanded=_additionalFeaturesIsExpanded>
                <MudSwitch @bind-Checked="@showUsersWhoHaveADCON" Color="Color.Primary">Guardians who have ADCON over you</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersWhoYouHaveADCON" Color="Color.Primary">Guardians who you have ADCON over</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersWhoHaveOPCON" Color="Color.Primary">Guardians who have OPCON over you</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersWhoYouHaveOPCON" Color="Color.Primary">Guardians who you have OPCON over</MudSwitch>
                <MudSwitch @bind-Checked="@showEvaluators" Color="Color.Primary">Guardians who evaluate you</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersThatYouEvaluate" Color="Color.Primary">Guardians that you evaluate</MudSwitch>
            </MudNavGroup>
        </MudNavMenu>
    </MudPaper>

   <!-- </div> -->
    <MudDataGrid Items="@users" MultiSelection="true" Hideable="true" Filterable="true" QuickFilter="@_quickFilter" Loading="@isLoading">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Guardians</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns >
            <Column T="UserModel" Field="firstName" Title="First Name"/>
            <Column T="UserModel" Field="lastName" Title="Last Name" />
            <Column T="UserModel" Field="email" Title="Contact" />
            <Column T="UserModel" Field="rank" />
            <Column T="UserModel" Field="job" />
            <Column T="UserModel" Filterable="false" Hideable="false">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenDialog(context.Item, currentUser))">
                        View More
                    </MudButton>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>

</div>








@code {

    bool showUsersWhoHaveADCON;
    bool showUsersWhoYouHaveADCON;
    bool showUsersWhoHaveOPCON;
    bool showUsersWhoYouHaveOPCON;
    bool showEvaluators;
    bool showUsersThatYouEvaluate;
    bool _additionalFeaturesIsExpanded;
    bool isLoading = true;

    List<UserModel> users;
    UserModel currentUser;

    private string _searchString;

    private Func<UserModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.firstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    private void OpenDialog(UserModel selectedUser, UserModel currentUser)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("selectedUser", selectedUser);
        parameters.Add("currentUser", currentUser);

        DialogService.Show<TeamManagementUserDialog>("User Data", parameters, options );
    }


    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }


    async Task getAllUsers()
    {
        users = await userData.getAllUsers();
    }

    protected async override Task OnInitializedAsync()
    {
        await GetLogin();
        await getAllUsers();
        isLoading = false;
    }
  
}
