@page "/Teammanagement"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject IAccoladeData accoladeData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService


<PageTitle>Team Management</PageTitle>

<head>
    <link rel="stylesheet" href="/css/fonts.css" />
</head>

<div>
    <!-- <MudDataGrid T="Element" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
    Hideable="true" RowClick="@RowClicked" SelectedItemsChanged="@SelectedItemsChanged">-->
    <!-- <div class="d-flex flex-wrap mt-4">  -->

    <MudPaper Width="350px" Class="mt-15 mb-3 pa-2" Elevation="4" Style="border-radius: 15px; background: #E7F1FF">
        <MudNavMenu>
            <MudNavGroup Class="mt-auto" Title="Additional Filters" Style="font-family: helveticaNeueBold; font-size: 120%;" @bind-Expanded=_additionalFeaturesIsExpanded>
                <MudSwitch @bind-Checked="@showUsersWhoHaveADCON" Color="Color.Primary">Guardians who have ADCON over you</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersWhoYouHaveADCON" Color="Color.Primary">Guardians who you have ADCON over</MudSwitch>
                <!-- 
                    <MudSwitch @bind-Checked="@showUsersWhoHaveOPCON" Color="Color.Primary">Guardians who have OPCON over you</MudSwitch>
                    <MudSwitch @bind-Checked="@showUsersWhoYouHaveOPCON" Color="Color.Primary">Guardians who you have OPCON over</MudSwitch>
                -->
                <MudSwitch @bind-Checked="@showEvaluators" Color="Color.Primary">Guardians who evaluate you</MudSwitch>
                <MudSwitch @bind-Checked="@showUsersThatYouEvaluate" Color="Color.Primary">Guardians that you evaluate</MudSwitch>
                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => onFilterChange())">
                        Update Filters
                </MudButton>
                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => onFilterReset())">
                    Remove Filters
                </MudButton>
            </MudNavGroup>
        </MudNavMenu>
    </MudPaper>

   <!-- </div> -->
    <MudDataGrid Items="@(displayedUsers.Count == 0 || filtersHaveBeenReset ? users : displayedUsers)" MultiSelection="true" Hideable="true" Filterable="true" QuickFilter="@_quickFilter" Loading="@isLoading" Elevation="4" Style="border-radius: 15px; background: #E7F1FF" >
        <ToolBarContent>
            <MudText Typo="Typo.h5">Guardians</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns >
            <Column T="UserModel" Field="firstName" Title="First Name"/>
            <Column T="UserModel" Field="lastName" Title="Last Name" />
            <Column T="UserModel" Field="email" Title="Contact" />
            <Column T="UserModel" Field="rank" />
            <Column T="UserModel" Field="job" />
            <Column T="UserModel" Filterable="false" Hideable="false">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenDialog(context.Item, currentUser))">
                        View More
                    </MudButton>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>

</div>








@code {

    Dictionary<String, bool> DisplayedUsersDictionary = new Dictionary<String, bool>();

    List<UserModel> users;
    UserModel currentUser;
    List<UserModel> subordinateUsers = new ();
    List<UserModel> displayedUsers = new();

    // TODO: make a 2D array [hasShownUsers, showUsersWhoHaveADCON]
    bool showUsersWhoHaveADCON;
    bool showUsersWhoYouHaveADCON;
    bool showUsersWhoHaveOPCON;
    bool showUsersWhoYouHaveOPCON;
    bool showEvaluators;
    bool showUsersThatYouEvaluate;

    bool filtersHaveBeenReset;
    bool _additionalFeaturesIsExpanded;
    bool isLoading = true;

    async Task onFilterChange()
    {
        resetUsersDictionary(DisplayedUsersDictionary);

        if (showUsersWhoYouHaveADCON == true)
        {
            if(subordinateUsers.Count == 0)
            {
                subordinateUsers = await getDirectSubordinates();
            }
            foreach (UserModel user in subordinateUsers)
            {
                // displayedUsers.Add(user);
                if(DisplayedUsersDictionary[user.Id] == false)
                {
                    displayedUsers.Add(user);
                    DisplayedUsersDictionary[user.Id] = true;
                }
            }
            filtersHaveBeenReset = false;
        }
        else if (showUsersWhoHaveADCON)
        {
            // TODO: get direct superior here
            filtersHaveBeenReset = false;
        }
        else if (showUsersWhoHaveOPCON)
        {
            // TODO: get users under OPCON
            filtersHaveBeenReset = false;
        }
        else if (showUsersWhoYouHaveOPCON)
        {
            // TODO: get all operation leads
            filtersHaveBeenReset = false;
        }
        else if (showEvaluators)
        {
            // TODO: show all people that evaluate you
            filtersHaveBeenReset = false;
        }
        else if (showUsersThatYouEvaluate)
        {
            // TODO: show all people that you evaluate. 
            filtersHaveBeenReset = false;
        }


    }

    void onFilterReset()
    {
        showUsersWhoHaveADCON = false;
        showUsersWhoYouHaveADCON = false;
        showUsersWhoHaveOPCON = false;
        showUsersWhoYouHaveOPCON = false;
        showEvaluators = false;
        showUsersThatYouEvaluate = false;
        filtersHaveBeenReset = true;
    }

    private string _searchString;

    private Func<UserModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.firstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    private void OpenDialog(UserModel selectedUser, UserModel currentUser)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("selectedUser", selectedUser);
        parameters.Add("currentUser", currentUser);

        DialogService.Show<TeamManagementUserDialog>("User Data", parameters, options );
    }


    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }

    private void AddUsersToDictionary(List<UserModel> usersList, Dictionary<String, bool> usersDictionary)
    {
        foreach(var user in usersList)
        {
            usersDictionary.Add(user.Id, true);
        }
    }

    private void resetUsersDictionary(Dictionary<String, bool> usersDictionary)
    {
        foreach(var user in usersDictionary)
        {
            usersDictionary[user.Key] = !user.Value;
        }
    }

    async Task getAllUsers()
    {
        users = await userData.getAllUsers();
    }


    async Task<List<UserModel>> getDirectSubordinates()
    {
        List<UserModel> subordinateUsers = new List<UserModel>();
        if (currentUser?.subordinates == null)
        {
            return subordinateUsers;
        }
        List<String> subordinateIds = currentUser.subordinates;

        foreach (String us in subordinateIds)
        {
            UserModel tmp = await userData.GetUserFromAuthentication(us);
            subordinateUsers.Add(tmp);
        }
        // displayedUsers = subordinateUsers;
        return subordinateUsers;
    }

    protected async override Task OnInitializedAsync()
    {
        await GetLogin();
        await getAllUsers();
        AddUsersToDictionary(users, DisplayedUsersDictionary);
        //subordinateUsers = await getDirectSubordinates();
        isLoading = false;
    }
  
}
