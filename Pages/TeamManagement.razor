@page "/Teammanagement"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject ITeamsData teamData
@inject IAccoladeData accoladeData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService
@inject IEvaluationsData evaluationsData


<PageTitle>Team Management</PageTitle>

<head>
    <link rel="stylesheet" href="/css/fonts.css" />

    <style>
        .filter {
            border-radius: 15px;
            background: #E7F1FF;
            box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25);
        }

        .filter-title {
            font-family: helveticaNeueBold;
            font-size: 135%;
        }

    </style>
</head>

<div>

    <MudPaper Width="350px" Class="filter mt-15 mb-3 pa-2" Elevation="4">
        <MudNavMenu class="filter-options">
            <MudNavGroup Class="filter-title mt-auto" Title="Additional Filters" @bind-Expanded=_additionalFeaturesIsExpanded>
                @if (filtersStatus != null)
                {
                    @foreach(var filterStatus in filtersStatus)
                    {
                        <div style="display: flex; padding-left: 30px">
                            <MudSwitch @bind-Checked="@filterStatus.showFilterData" Color="Color.Primary">
                            <div style="font-family: HelveticaNeueMedium; font-style: normal; font-weight: 900; font-size: 80%;">
                                    @filterStatus.name
                            </div>
                            </MudSwitch>
                        </div>
                    }
                }
                <MudButton Class="ml-16" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => onFilterChange())" Style=" font-family: helveticaNeueMedium;">
                        Update
                </MudButton>
                <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => onFilterReset())" Style=" font-family: helveticaNeueMedium;">
                    Remove
                </MudButton>
            </MudNavGroup>
        </MudNavMenu>
    </MudPaper>

    <MudDataGrid Items="@( filtersHaveBeenReset ? users : (displayedUsers.Count == 0 ? noResults : displayedUsers))" MultiSelection="true" Hover="true" Hideable="true" Filterable="true" QuickFilter="@_quickFilter" Loading="@isLoading" Elevation="4" Style=" font-family:HelveticaNeueMedium; font-style: normal; font-weight: 900; font-size:80%; border-radius: 15px; background: #E7F1FF; box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25);">
        <ToolBarContent>
            <MudText Style="font-family: helveticaNeueBold; font-size: 300%;">Guardians</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns >
            <Column T="UserModel" Field="firstName" Title="First Name" />
            <Column T="UserModel" Field="lastName" Title="Last Name" />
            <Column T="UserModel" Field="email" Title="Contact" />
            <Column T="UserModel" Field="rank" Title="Rank"/>
            <Column T="UserModel" Field="job" Title="Job"/>
            <Column T="UserModel" Filterable="false" Hideable="false">
                <CellTemplate>
                    <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenDialog(context.Item, currentUser))" Style=" font-family: helveticaNeueMedium;">
                        View More
                    </MudButton>
                </CellTemplate>
            </Column>
        </Columns>
    </MudDataGrid>

</div>



@code {


    Dictionary<String, bool> DisplayedUsersDictionary = new Dictionary<String, bool>();


    List<UserModel> users;
    UserModel currentUser;
    List<UserModel> subordinateUsers = new ();
    List<UserModel> selfAssignedEvaluators = new();
    List<UserModel> usersUnderYourOPCON = new();
    List<UserModel> noResults = new();
    List<UserModel> displayedUsers = new();
    List<TeamsModel> currentUserTeams = new ();


    public class FilterStatus
    {
        public String name { get; set; }
        public bool showFilterData { get; set; }
        public bool hasFetchedFilterData { get; set; }
    }


    private FilterStatus[] filtersStatus;


    bool filtersHaveBeenReset = true;
    bool _additionalFeaturesIsExpanded;
    bool isLoading = true;
    bool buttonFlag = true;


    async Task onFilterChange()
    {
        displayedUsers.Clear();
        DisplayedUsersDictionary.Clear(); // empties dictionary
                                          // clear the dictionary as well
        isLoading = true;

        for(int i = 0; i < filtersStatus.GetLength(0); i++)
        {
            if (filtersStatus[i].name == "Users under your ADCON" && filtersStatus[i].showFilterData)
            {
                if (!filtersStatus[i].hasFetchedFilterData)
                {
                    subordinateUsers = await userData.GetDirectSubordinates(currentUser);
                    filtersStatus[i].hasFetchedFilterData = true;
                }
                // if not in dictionary already, then add
                // else, nothing
                if(subordinateUsers != null)
                {
                    foreach (var subordinate in subordinateUsers)
                    {
                        if (DisplayedUsersDictionary.ContainsKey(subordinate.userID) == false)
                        {
                            displayedUsers.Add(subordinate);
                        }
                    }
                }
                //displayedUsers = displayedUsers.Union(subordinateUsers).ToList();
                buttonFlag = false;
            }

            else if (filtersStatus[i].name == "Self assigned evaluators" && filtersStatus[i].showFilterData)
            {
                if (!filtersStatus[i].hasFetchedFilterData)
                {
                    selfAssignedEvaluators = await getSelfAssignedEvaluators(currentUser);
                    filtersStatus[i].hasFetchedFilterData = true;
                }

                if (selfAssignedEvaluators != null)
                {
                    // if not in dictionary already, then add
                    // else, code below
                    foreach (var evaluator in selfAssignedEvaluators)
                    {
                        if (DisplayedUsersDictionary.ContainsKey(evaluator.userID) == false)
                        {
                            displayedUsers.Add(evaluator);
                        }
                    }

                    //displayedUsers = displayedUsers.Union(selfAssignedEvaluators).ToList();
                    displayedUsers.RemoveAll(item => item == null);
                }

            }

            else if (filtersStatus[i].name == "Users you evaluate")
            {
                // TODO: get users who you evaluate
                if (!filtersStatus[i].hasFetchedFilterData)
                {

                }
            }

            else if (filtersStatus[i].name == "Users under your OPCON" && filtersStatus[i].showFilterData)
            {
                if (!filtersStatus[i].hasFetchedFilterData)
                {
                    usersUnderYourOPCON = await getUsersUnderOPCON(currentUser);
                    filtersStatus[i].hasFetchedFilterData = true;
                }

                if(usersUnderYourOPCON != null)
                {

                    foreach (var user in usersUnderYourOPCON)
                    {
                        if (DisplayedUsersDictionary.ContainsKey(user.userID) == false)
                        {
                            displayedUsers.Add(user);
                        }
                    }
                    // displayedUsers = displayedUsers.Union(usersUnderYourOPCON).ToList();
                    displayedUsers.RemoveAll(item => item == null);
                }
            }
        }
        filtersHaveBeenReset = false;
        isLoading = false;
    }


    void onFilterReset()
    {
        for (int i = 0; i < filtersStatus.GetLength(0); i++)
            filtersStatus[i].showFilterData = false;
        filtersHaveBeenReset = true;
        buttonFlag = true;
        // TODO: reset displayed users
    }


    private string _searchString;


    private Func<UserModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.firstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };


    private void OpenDialog(UserModel selectedUser, UserModel currentUser)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("selectedUser", selectedUser);
        parameters.Add("currentUser", currentUser);
        parameters.Add("currentUserTeams", currentUserTeams);

        DialogService.Show<TeamManagementUserDialog>("User Data", parameters, options );
    }


    private void AddUsersToDictionary(List<UserModel> usersList, Dictionary<String, bool> usersDictionary)
    {
        foreach(var user in usersList)
        {
            usersDictionary.Add(user.Id, true);
        }
    }

    private void resetUsersDictionary(Dictionary<String, bool> usersDictionary)
    {
        foreach(var user in usersDictionary)
        {
            usersDictionary[user.Key] = !user.Value;
        }
    }


    private void initializeFiltersStatus()
    {
        for (int i = 0; i < filtersStatus.GetLength(0); i++)
        {
            String filterName;
            if (i == 0) filterName = "Users under your ADCON";
            else if (i == 1) filterName = "Self assigned evaluators";
            //else if (i == 2) filterName = "Users you evaluate";
            else filterName = "Users under your OPCON";
            filtersStatus[i] = new FilterStatus
                {
                    name = filterName,
                    showFilterData = false,
                    hasFetchedFilterData = false
                };
        }
    }


    // TODO: move this to data layer
    public async Task<List<UserModel>> getSelfAssignedEvaluators(UserModel user)
    {
        var selfAssignedEvaluatorIDs = await evaluationsData.GetAllSelfAssignedEvaluatorsIDs(user.userID);

        List<UserModel> selfAssignedEvaluators = new List<UserModel>();

        if(selfAssignedEvaluatorIDs != null)
        {
            foreach(var evaluatorID in selfAssignedEvaluatorIDs)
            {
                selfAssignedEvaluators.Add(await userData.GetUser(evaluatorID));
            }
        }

        return selfAssignedEvaluators;
    }


    // TODO: move to data layer
    public async Task<List<UserModel>> getUsersUnderOPCON(UserModel user)
    {
        List<TeamsModel> teamsUserLeads = await teamData.GetTeamsByLeader(user.userID);
        List<UserModel> usersUnderOPCON = new List<UserModel>();
        List<string> usersIDUnderOPCON = new List<string>();

        if(teamsUserLeads != null)
        {
            foreach(var team in teamsUserLeads)
            {
                if(team.members != null)
                {
                    foreach (var member in team.members)
                    {
                        if(usersIDUnderOPCON.Contains(member) == false)
                        {
                            usersIDUnderOPCON.Add(member);
                            usersUnderOPCON.Add(await userData.GetUser(member));
                        }
                    }
                }
            }
        }

        return usersUnderOPCON;
    }


    protected async override Task OnInitializedAsync()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
        users = await userData.getAllUsers();
        AddUsersToDictionary(users, DisplayedUsersDictionary);

        if(currentUser.teamIDs != null)
        {
            foreach(var teamID in currentUser.teamIDs)
            {
                if(teamID != "") 
                {
                    TeamsModel tempTeam = new TeamsModel();
                    tempTeam = await teamData.GetTeam(teamID);
                    currentUserTeams.Add(tempTeam);
                }
            }
        }
        filtersStatus = new FilterStatus[3];
        initializeFiltersStatus();
        isLoading = false;
    }
  
}
