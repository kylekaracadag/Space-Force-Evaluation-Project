@page "/mysurveys"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject IAccoladeData accoladeData
@inject IJSRuntime JsRuntime 
@inject IDialogService DialogService
@inject INewSurveyData newSurveyData

<PageTitle>My Surveys</PageTitle>

<head>
    <link rel="stylesheet" href="/css/fonts.css" />
</head>

<div>
    <MudTable Class="mt-15 mb-3 pa-2" Items="@newSurveyList" Hover="true" Loading="@isLoading">
        <HeaderContent>
            <MudTh>Date Administered</MudTh>
            <MudTh>Date Taken</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@ConvertDateTime(context.date_administered)</MudTd>
            <MudTd>@ConvertDateTime(context.date_taken)</MudTd>
            <MudTd>
                <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                    View More
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

</div>



@code {

    bool isLoading;
    UserModel currentUser;
    List<NewSurveyModel> newSurveyList;

    private string _searchString;

    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }

    private DateTime ConvertDateTime(DateTime t)
    {
        TimeZoneInfo Eastern_Standard_Time = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
        DateTime easternTime = TimeZoneInfo.ConvertTimeFromUtc(t, Eastern_Standard_Time);
        return easternTime;
    }


    private void OpenDialog(NewSurveyModel surveyParam)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        //parameters.Add("surveyParam", surveyParam);
        parameters.Add("currentUser", currentUser);
        parameters.Add("survey", surveyParam);
        DialogService.Show<SurveyDialog>("Survey Data", parameters, options);
    }


    protected async override Task OnInitializedAsync()
    {
        isLoading = false;
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);

         
        newSurveyList = await newSurveyData.GetNewSurveysbyUser(currentUser.userID);
        TimeZoneInfo Eastern_Standard_Time = TimeZoneInfo.FindSystemTimeZoneById("Eastern Standard Time");
        
    }
}
