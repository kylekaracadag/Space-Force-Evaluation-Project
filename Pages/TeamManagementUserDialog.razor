@inject IUserData userData

<MudDialog>
    <DialogContent>
        <div>
            <!-- TODO: show the selectedUser's data here' -->
            <p class="mb-4">@selectedUser.firstName</p>
                @if (hasADCON && !isSameUser)
                {
                    <p>Under your adminstrative control</p>
                }
                else if (hasGreatORequalRole && !isSameUser)
                {
                    <p>Is not under your administrative control</p>
                    <MudButton OnClick="() => addUserToSubordinates(selectedUser.userID)">Request ADCON</MudButton>
                }
            <p>TODO: Ask Roger if this is the information he wants to display here</p>
            <p>Reports to?</p>
            <p>last daily survey taken?</p>
            <p>last weekly survey taken?</p>
            <p>last monthly survey taken?</p>

            <p>TODO: Ask Roger if these are the actions he wants to display/allow here</p>
            <p>Request ADCON (if the roles are correct)</p>
            <p>Assign ADCON (if current user is HQ and they do not have anyone who has ADCON over them)</p>
            <p>Assign role (if current user is HQ)</p>
            <p>Assign as your Evaluator</p>
            <p>Assign to be Evaluator for someone that you have ADCON over </p>
            <p>Assign (user under your ADCON) to operation you lead</p>
            <p>Request (user not under your ADCON) to operation you lead</p>
            <!-- TODO: conditionally disable buttons when necessary -->
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton OnClick="() => Cancel()">Request ADCON</MudButton>
        <MudButton OnClick="() => Cancel()">Request OPCON</MudButton>
        <MudButton OnClick="() => Cancel()">Request to be evaulator</MudButton>
    </DialogActions>
</MudDialog>
@code {


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel selectedUser { get; set; }
    [Parameter] public UserModel currentUser { get; set; }

    bool hasADCON = false;
    bool hasOPCON = false;
    bool hasGreatORequalRole = false;
    bool isSameUser = false;
    bool selectedUserHasUnassignedRole;
    bool canCurrentUserAssignRoles = false;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    async Task addUserToSubordinates(string subordinateId)
    {
        await userData.AddUserToSubordinates(currentUser, subordinateId);
    }

    async Task requestADCONOverUser(string userId)
    {
        // TODO: send request to appropriate commanders if necessary.
    }



    bool hasADCONOverUser(string userId)
    {
        if (currentUser.subordinates == null)
        {
            return false;
        }
        for (var i = 0; i < currentUser.subordinates.Count; i++)
        {
            if (currentUser.subordinates[i] == userId)
            {
                return true;
            }
        }
        return false;
    }

    IDictionary<string, int> roles = new Dictionary<string, int>() {
        { "HQ", 1 },
        { "Commander", 2 },
        { "Supervisor", 3 },
        { "Member", 4 },
    };


    bool isSuperiorToSelectedUser(string selectedUserRole)
    {
        if (selectedUserRole == "HQ" || selectedUserRole == "Commander" || selectedUserRole == "Supervisor" || selectedUserRole == "Member")
        {
            if (currentUser.role == "HQ" || currentUser.role == "Commander" || currentUser.role == "Supervisor" || currentUser.role == "Member")
            {
                if (roles[selectedUserRole] <= roles[currentUser.role])
                {
                    return true;
                }
            }
        }

        return false;
    }

    bool doesUserHaveUnassignedRole(UserModel selectedUser)
    {
        return selectedUser.role == null;
    }


    protected async override Task OnInitializedAsync()
    {
        hasADCON = hasADCONOverUser(selectedUser.userID);
        hasOPCON = false;
        hasGreatORequalRole = isSuperiorToSelectedUser(selectedUser.role);
        selectedUserHasUnassignedRole = doesUserHaveUnassignedRole(selectedUser);
        canCurrentUserAssignRoles = (currentUser?.role == "Commander" || currentUser?.role == "HQ");
        isSameUser = selectedUser.userID == currentUser.userID;
    }
}
