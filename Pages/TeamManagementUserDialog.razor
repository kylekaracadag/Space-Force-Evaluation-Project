@inject IUserData userData

<MudDialog>
    <DialogContent>
        <div>
            <!-- TODO: show the selectedUser's data here' -->
            <p class="mb-4">@selectedUser.firstName</p>
            <p>Direct superior: @superiorName</p>
            <p>Rank: @selectedUser.rank</p>
            <p>Job: @selectedUser.job</p>
            <p>Role: @selectedUser.role</p>

            @if (currentUser.role == "HQ")
            {
                <MudSelect @bind-Value="roleAssignmentValue" Label="Update Role" Placeholder="Select role" AdornmentColor="Color.Primary">
                    <MudSelectItem Value="@("N/A")" Disabled="true">Roles</MudSelectItem>
                    <MudSelectItem Value="@("Commander")">Commander</MudSelectItem>
                    <MudSelectItem Value="@("Supervisor")">Supervisor</MudSelectItem>
                    <MudSelectItem Value="@("Member")">Member</MudSelectItem>
                </MudSelect>
                <MudButton OnClick="() => updateSelectedUserRole(roleAssignmentValue)">Confirm Role @roleAssignmentPrompt</MudButton>
                <MudButton OnClick="() => addUserToSubordinates(selectedUser.userID)">Take ADCON</MudButton>

                
            }
            else if (hasADCON && !isSameUser)
            {
                <p>Under your adminstrative control</p>
                <p>last daily survey taken: TODO</p>
                <p>last weekly survey taken: TODO</p>
                <p>last monthly survey taken: TODO</p>
                <p>Assign evaluator: TODO</p>
            }


            <!--TODO: remove after testing
            <MudButton OnClick="() => addUserToSubordinates(selectedUser.userID)">Request ADCON</MudButton>
            -->

            <!--
            <p>TODO: Ask Roger if these are the actions he wants to display/allow here</p>
            
            <p>Assign as your Evaluator</p>
            <p>Assign to be Evaluator for someone that you have ADCON over </p>
            <p>Assign (user under your ADCON) to operation you lead</p>
            <p>Request (user not under your ADCON) to operation you lead</p>
              -->
        </div>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (hasGreatORequalRole && !isSameUser)
        {
            @if (isSuperiorToSelectedUser(selectedUser.role))
            {
                <MudMenu Label="Request: ">
                    <MudMenuItem OnClick="() => Cancel()">Request ADCON</MudMenuItem>
                    <MudMenuItem OnClick="() => Cancel()">Request OPCON</MudMenuItem>
                    <MudMenuItem OnClick="() => Cancel()">Request to be evaulator</MudMenuItem>
                </MudMenu>
            }
        }
        
    </DialogActions>
</MudDialog>
@code {


    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel selectedUser { get; set; }
    [Parameter] public UserModel currentUser { get; set; }

    bool hasADCON = false;
    bool hasOPCON = false;
    bool hasGreatORequalRole = false;
    bool isSameUser = false;
    bool selectedUserHasUnassignedRole;
    bool canCurrentUserAssignRoles = false;

    String roleAssignmentValue = "";
    String roleAssignmentPrompt = "";
    String superiorName = "";
    UserModel superior;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    async Task addUserToSubordinates(string subordinateId)
    {
        await userData.ADCONTransfer(currentUser, subordinateId);
    }

    async Task requestADCONOverUser(string userId)
    {
        // TODO: send request to appropriate commanders if necessary.
    }



    bool hasADCONOverUser(string userId)
    {
        if (currentUser.subordinates == null)
        {
            return false;
        }
        for (var i = 0; i < currentUser.subordinates.Count; i++)
        {
            if (currentUser.subordinates[i] == userId)
            {
                return true;
            }
        }
        return false;
    }

    IDictionary<string, int> roles = new Dictionary<string, int>() {
        { "HQ", 1 },
        { "Commander", 2 },
        { "Supervisor", 3 },
        { "Member", 4 },
    };


    bool isSuperiorToSelectedUser(string selectedUserRole)
    {
        if (selectedUserRole == "HQ" || selectedUserRole == "Commander" || selectedUserRole == "Supervisor" || selectedUserRole == "Member")
        {
            if (currentUser.role == "HQ" || currentUser.role == "Commander" || currentUser.role == "Supervisor" || currentUser.role == "Member")
            {
                if (roles[selectedUserRole] >= roles[currentUser.role])
                {
                    return true;
                }
            }
        }

        return false;
    }

    bool doesUserHaveUnassignedRole(UserModel selectedUser)
    {
        return selectedUser.role == null;
    }

    async void updateSelectedUserRole(String newRole)
    {
        selectedUser.role = newRole;
        await userData.UpdateUser(selectedUser);
    }


    protected async override Task OnInitializedAsync()
    {
        hasADCON = hasADCONOverUser(selectedUser.userID);
        hasOPCON = false;
        hasGreatORequalRole = isSuperiorToSelectedUser(selectedUser.role);
        selectedUserHasUnassignedRole = doesUserHaveUnassignedRole(selectedUser);
        canCurrentUserAssignRoles = (currentUser?.role == "Commander" || currentUser?.role == "HQ");
        isSameUser = selectedUser.userID == currentUser.userID;
        if (selectedUser.role == null) roleAssignmentPrompt = "Assignment"; else roleAssignmentPrompt = "Change";

        if (selectedUser.superiors == null)
        {
            superiorName = "None";
        }
        else
        {
            superior = await userData.GetUserFromAuthentication(selectedUser?.superiors[0]);
            superiorName = superior?.firstName;
        }
        
    }
}
