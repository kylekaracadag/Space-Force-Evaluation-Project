@page "/Teammanagement/Requests"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject IRequestsData requestsData
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IADCONData ADCONData


<PageTitle>Team Management</PageTitle>

<div>

    <MudPaper Width="100%" Class="mt-15 mb-3 pa-2" Elevation="1">

        <MudNavGroup Title="Recieved ADCON Transfer Requests" @bind-Expanded=_recievedADCONisExpanded>
                <MudTable Items="@recievedADCONRequests" Hover="true" Loading="@_loadingRecievedRequests">
                    <HeaderContent>
                        <MudTh>User</MudTh>
                        <MudTh>Current Superior</MudTh>
                        <MudTh>New Superior</MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ADCONTransferRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.user.firstName</MudTd>
                        <MudTd>@context.currentSuperior.firstName</MudTd>
                        <MudTd>@context.newSuperior.firstName</MudTd>
                        <MudTd>@context.status</MudTd>
                        <MudTd>
                            <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                                View More
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudNavGroup>

            
        <MudNavGroup Title="Sent ADCON Transfer Requests" @bind-Expanded=_sentADCONisExpanded>
                <MudTable Items="@sentADCONRequests" Hover="true" Loading="@_loadingSentRequests">
                    <HeaderContent>
                        <MudTh>User</MudTh>
                        <MudTh>Current Superior</MudTh>
                        <MudTh>New Superior</MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ADCONTransferRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.user.firstName</MudTd>
                        <MudTd>@context.currentSuperior.firstName</MudTd>
                        <MudTd>@context.newSuperior.firstName</MudTd>
                        <MudTd>@context.status</MudTd>
                        <MudTd>
                            <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">
                                View More
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudNavGroup>
        

    </MudPaper>
</div>



@code {

    public class ADCONTransferRequests {
        public UserModel user; 
        public UserModel currentSuperior; 
        public UserModel newSuperior; 
        public RequestsModel request;
        public String status;
    }

    List<ADCONTransferRequests> recievedADCONRequests = new List<ADCONTransferRequests>();
    List<ADCONTransferRequests> sentADCONRequests = new List<ADCONTransferRequests>();
    int numberPendingADCONTransferRequest;


    bool _sentADCONisExpanded = true;
    bool _recievedADCONisExpanded = true;


    bool isChangingRequestStatus = false;
    bool _loadingRecievedRequests;
    bool _loadingSentRequests;



    UserModel currentUser;
    List<RequestsModel> sentRequests = new List<RequestsModel>();
    List<RequestsModel> recievedRequests = new List<RequestsModel>();



    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }


    public async void _UpdateADCONTransferRequestsStatus(String newStatus, ADCONTransferRequests context)
    {
        context.status = newStatus;
        context.request.status = newStatus;

        if (newStatus == "Awaiting second response")
        {
            if (context.request.requestRecipiants[0] == currentUser.userID)
            {
                context.request.requestRecipiants[0] = context.request.requestRecipiants[1];
            }
            context.request.requestRecipiants[1] = null;
        }
        await requestsData.UpdateRequest(context.request);
        StateHasChanged();
    }

    private void OpenDialog(ADCONTransferRequests context)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        void UpdateADCONTransferRequestsStatus(String newStatus)
        {
            _UpdateADCONTransferRequestsStatus(newStatus, context);
        }

        parameters.Add("newSubordinate", context.user);
        parameters.Add("newSuperior", context.newSuperior);
        parameters.Add("UpdateStatus", UpdateADCONTransferRequestsStatus);
        parameters.Add("CurrentStatus", context.request.status);
        parameters.Add("canApproveOrDeny", (currentUser.userID == context.request.requestRecipiants[0]
                                            || currentUser.userID == context.request.requestRecipiants[1]));
        parameters.Add("requiresMultipleApprovals", (context.request.requestRecipiants.Count == 2 && context.request.requestRecipiants[1] != null));

        DialogService.Show<RequestDialog>("Request Data", parameters, options);
    }


    protected async override Task OnInitializedAsync()
    {
        _loadingRecievedRequests = true;
        await GetLogin();

        
        recievedRequests = await requestsData.GetRecievedRequests(currentUser.userID);
        for(int i = 0; i < recievedRequests.Count; i++)
        {
            RequestsModel request = recievedRequests[i];
            if (request.type == "ADCON transfer request")
            {
                ADCONTransferRequests newRequest = new ADCONTransferRequests();
                newRequest.newSuperior = (await userData.GetUser(request.requestInitiator));
                newRequest.user = (await userData.GetUser(request.values[0]));
       
                string currentSuperiorID = (await ADCONData.GetADCONBySubordinate(newRequest.user.userID))?.superiorID;
                newRequest.currentSuperior = (await userData.GetUser(currentSuperiorID));

                newRequest.request = request;
                newRequest.status = request.status;

                recievedADCONRequests.Add(newRequest);
            }
        }
        _loadingRecievedRequests = false;


        _loadingSentRequests = true;
        sentRequests = await requestsData.GetSentRequests(currentUser.userID);
        for (int i = 0; i < sentRequests.Count; i++)
        {
            RequestsModel request = sentRequests[i];
            ADCONTransferRequests newRequest = new ADCONTransferRequests();
            newRequest.newSuperior = (await userData.GetUser(request.requestInitiator));
            newRequest.user = (await userData.GetUser(request.values[0]));

            string currentSuperiorID = (await ADCONData.GetADCONBySubordinate(newRequest.user.userID))?.superiorID;
            newRequest.currentSuperior = (await userData.GetUser(currentSuperiorID));

            newRequest.request = request;
            newRequest.status = request.status;

            sentADCONRequests.Add(newRequest);
        }
        _loadingSentRequests = false;
    }
    

  
}
