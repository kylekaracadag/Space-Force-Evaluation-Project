@page "/Requests/evaluation-assignment-requests"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IUserData userData
@inject IRequestsData requestsData
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<PageTitle>Evaluation Requests</PageTitle>

<div>

    <MudPaper Width="100%" Class="mt-15 mb-3 pa-2" Elevation="1" Style="box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25), 0px 4px 4px rgba(0, 0, 0, 0.25); border-radius: 15px; background: #E7F1FF;">

        <MudNavGroup Title="Recieved Evaluation Requests" @bind-Expanded=_recievedEvaluationisExpanded Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 130%;">
            <MudTable Items="@recievedEvaluationRequests" Hover="true" Loading="@_loadingRecievedRequests">
                <HeaderContent>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">Request Initiator</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">User Being Evaluated</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">New Evaluator</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EvaluationAssignmentRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.requestInitiator.firstName @context.requestInitiator.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.user.firstName @context.user.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.newEvaluator.firstName  @context.newEvaluator.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.status</MudTd>
                    <MudTd>
                        <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style=" font-family: helveticaNeueMedium;">
                            View More
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudNavGroup>

            
        <MudNavGroup Title="Sent Evaluation Requests" @bind-Expanded=_sentEvaluationisExpanded Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 130%;">
            <MudTable Items="@sentEvaluationRequests" Hover="true" Loading="@_loadingSentRequests">
                <HeaderContent>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">Request Initiator</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">User Being Evaluated</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;">New Evaluator</MudTh>
                    <MudTh Style="font-family: 'HelveticaNeueBold'; font-style: normal; font-weight: 400; font-size: 100%;"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<EvaluationAssignmentRequests, object>(x=>x.status)">Status</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.requestInitiator.firstName @context.requestInitiator.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.user.firstName @context.user.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.newEvaluator.firstName  @context.newEvaluator.lastName</MudTd>
                    <MudTd Style="font-family: 'HelveticaNeueMedium'; font-style: normal; font-weight: 400; font-size: 70%;">@context.status</MudTd>
                    <MudTd>
                        <MudButton OnClick="@(() => OpenDialog(context))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" Style=" font-family: helveticaNeueMedium;">
                            View More
                        </MudButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudNavGroup>
        

    </MudPaper>
</div>



@code {

    public class EvaluationAssignmentRequests
    {
        public UserModel user;
        public UserModel superiorOfUser;
        public UserModel newEvaluator; 
        public RequestsModel request;
        public String status;
        public UserModel requestInitiator;
    }

    List<EvaluationAssignmentRequests> recievedEvaluationRequests = new List<EvaluationAssignmentRequests>();
    List<EvaluationAssignmentRequests> sentEvaluationRequests = new List<EvaluationAssignmentRequests>();

    bool _sentEvaluationisExpanded = true;
    bool _recievedEvaluationisExpanded = true;
    bool isChangingEvaluationStatus = false;
    bool _loadingRecievedRequests;
    bool _loadingSentRequests;

    UserModel currentUser;
    List<RequestsModel> sentRequests = new List<RequestsModel>();
    List<RequestsModel> recievedRequests = new List<RequestsModel>();

    // Function to get the current logged in user.
    private async Task GetLogin()
    {
        currentUser = await AuthenticationStateProviderHelpers.GetUserFromAuth(authProvider, userData);
    }


    public async void _UpdateEvaluationTransferRequestsStatus(String newStatus, EvaluationAssignmentRequests context)
    {
        context.status = newStatus;
        context.request.status = newStatus;

        if (context.request.requestRespondents == null)
        {
            context.request.requestRespondents = new List<String>();
        }

        context.request.requestRespondents.Add(currentUser.userID);

        if (newStatus == "Awaiting second response")
        {
            if (context.request.requestRecipiants[0] == currentUser.userID)
            {
                context.request.requestRecipiants[0] = context.request.requestRecipiants[1];
            }
            context.request.requestRecipiants[1] = null;
        }
        await requestsData.UpdateRequest(context.request);
        StateHasChanged();
    }

    private async void OpenDialog(EvaluationAssignmentRequests context)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        void UpdateEvaluationTransferRequestsStatus(String newStatus)
        {
            _UpdateEvaluationTransferRequestsStatus(newStatus, context);
        }

        //[Parameter] public UserModel user { get; set; }

        parameters.Add("UpdateStatus", UpdateEvaluationTransferRequestsStatus);
        parameters.Add("CurrentStatus", context.request.status);
        parameters.Add("canApproveOrDeny", (currentUser.userID == context.request.requestRecipiants[0]
                                            || currentUser.userID == context.request.requestRecipiants[1]));
        parameters.Add("requiresMultipleApprovals", (context.request.requestRecipiants.Count > 1 && context.request.requestRecipiants[1] != null));
        parameters.Add("newEvaluator", (context.newEvaluator));
        parameters.Add("user", context.user);

        if (context.request.type == "EvaluationAssignmentRequest")
        {
            DialogService.Show<SelfAssignedEvaluatorRequestDialog>("Request Data", parameters, options);
        }
        else if(context.request.type == "SuperiorAssignedEvaluationRequest")
        {
            DialogService.Show<SuperiorAssignedEvaluatorRequestDialog>("Request Data", parameters, options);
        }
    }


    protected async override Task OnInitializedAsync()
    {
        _loadingRecievedRequests = true;
        await GetLogin();
        recievedRequests = await requestsData.GetRecievedRequests(currentUser.userID);
        for (int i = 0; i < recievedRequests.Count; i++)
        {
            RequestsModel request = recievedRequests[i];
            // gets self assigned evaluation requests
            if (request.type == "EvaluationAssignmentRequest")
            {
                EvaluationAssignmentRequests newRequest = new EvaluationAssignmentRequests();

                newRequest.newEvaluator = (await userData.GetUser(request.values[0]));
                newRequest.superiorOfUser = (await userData.GetUser(request.requestRecipiants[0]));
                newRequest.user = (await userData.GetUser(request.values[1]));
                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.requestInitiator = (await userData.GetUser(request.requestInitiator));

                recievedEvaluationRequests.Add(newRequest);
            }
            else if (request.type == "SuperiorAssignedEvaluationRequest") // NOTE: keeping this incase we have to send the evaluation request to another person as well
            {
                EvaluationAssignmentRequests newRequest = new EvaluationAssignmentRequests();

                newRequest.newEvaluator = (await userData.GetUser(request.requestRecipiants[0]));
                newRequest.superiorOfUser = null;
                newRequest.user = (await userData.GetUser(request.values[0]));
                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.requestInitiator = (await userData.GetUser(request.requestInitiator));

                recievedEvaluationRequests.Add(newRequest);
            }
        }
        _loadingRecievedRequests = false;


        _loadingSentRequests = true;
        sentRequests = await requestsData.GetSentRequests(currentUser.userID);
        for (int i = 0; i < sentRequests.Count; i++)
        {
            RequestsModel request = sentRequests[i];

            if (request.type == "EvaluationAssignmentRequest")
            {
                EvaluationAssignmentRequests newRequest = new EvaluationAssignmentRequests();

                newRequest.newEvaluator = (await userData.GetUser(request.values[0]));
                newRequest.superiorOfUser = (await userData.GetUser(request.requestRecipiants[0]));
                newRequest.user = (await userData.GetUser(request.values[1]));
                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.requestInitiator = (await userData.GetUser(request.requestInitiator));

                sentEvaluationRequests.Add(newRequest);
            }
            else if (request.type == "SuperiorAssignedEvaluationRequest")
            {
                EvaluationAssignmentRequests newRequest = new EvaluationAssignmentRequests();

                newRequest.newEvaluator = (await userData.GetUser(request.requestRecipiants[0]));
                newRequest.superiorOfUser = (await userData.GetUser(request.requestRecipiants[0]));
                newRequest.user = (await userData.GetUser(request.values[0]));
                newRequest.request = request;
                newRequest.status = request.status;
                newRequest.requestInitiator = (await userData.GetUser(request.requestInitiator));

                sentEvaluationRequests.Add(newRequest);
            }
        }
        _loadingSentRequests = false;

    }
    

  
}
