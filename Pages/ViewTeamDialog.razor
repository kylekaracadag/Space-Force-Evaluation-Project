@inject IUserData userData
@inject ITeamsData teamsData
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if(teamInfo.teamLeader != null)
        {
            <MudText><b>Team Leader Name:</b> @teamInfo.teamLeader.firstName</MudText>
            <MudText><b>Team Leader Contact:</b> @teamInfo.teamLeader.email</MudText>
        }
        
        @if(teamInfo.teamCreator != null)
        {
            <MudText><b>Supervising Commander Name:</b> @teamInfo.teamCreator.firstName</MudText>
            <MudText><b>Supervising Commander Contact:</b> @teamInfo.teamCreator.email</MudText>
        }

        <MudTable Items="@teamInfo.teamMembers" Hover="true" Loading="@isLoading">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Members</MudText>
                <MudSpacer />
            </ToolBarContent>

            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Contact</MudTh>
                <MudTh>Rank</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.firstName</MudTd>
                <MudTd>@context.email</MudTd>
                <MudTd>@context.rank</MudTd>
                @if(currentUser.userID == team.leader || currentUser.userID == team.creator)
                {
                    <MudTd><MudButton OnClick="() => onMemberRemoval(team.ObjectId, context.userID)">Remove From Team</MudButton></MudTd>
                }
            </RowTemplate>
        </MudTable>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Disabled="@buttonFlag" Size="@Size.Small" Variant="@Variant.Filled" OnClick="@(() => OpenSendQuestion())" Color="@Color.Primary">
            Send Question
        </MudButton>
    </DialogActions>
</MudDialog>



@code {

    public class TeamView
    {
        public UserModel teamLeader;
        public UserModel teamCreator;
        public UserModel currentUser;
        public List<UserModel> teamMembers;
        public string teamName;
        public TeamsModel team;
    }

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public UserModel currentUser { get; set; }
    [Parameter] public TeamsModel team { get; set; }

    TeamView teamInfo = new TeamView();
    bool buttonFlag = false;
    bool isLoading = false;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private void OpenSendQuestion()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        parameters.Add("users", team.members);
        parameters.Add("currentUser", currentUser);

        DialogService.Show<SendQuestionUserDialog>("Send Question", parameters, options);
    }

    public async Task<bool> removeMember(string teamID, string memberToRemove)
    {
        TeamsModel team = await teamsData.GetTeam(teamID);

        if(team.members.Contains(memberToRemove) == false)
        {
            return false;
        }

        team.members.Remove(memberToRemove);
        await teamsData.UpdateTeam(team);

        return true;
    }

    public async Task onMemberRemoval(string teamID, string memberToRemoveID)
    {
        bool result = await removeMember(teamID, memberToRemoveID);

        if(result)
        {
            Snackbar.Add("Successfully removed user from team. Refresh to see changes.", Severity.Success);
        }
        else
        {
            Snackbar.Add("ERROR: unable to remove user from team.", Severity.Success);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        isLoading = true;
        buttonFlag = true;
        teamInfo.teamLeader = await userData.GetUser(team.leader);
        // Console.WriteLine(team.creator);
        teamInfo.teamCreator = await userData.GetUser(team.creator);
        teamInfo.teamName = team.name;
        if(team.members != null)
        {
            teamInfo.teamMembers = new List<UserModel>();
            foreach(var member in team.members)
            {
                teamInfo.teamMembers.Add(await userData.GetUser(member));
            }
        }

        isLoading = false;
        if (currentUser.userID == teamInfo.teamLeader.userID && teamInfo.teamMembers.Count > 0) buttonFlag = false;
        else buttonFlag = true;
    }
}
